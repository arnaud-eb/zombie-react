{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","props","componentDidMount","eth","net","getId","networkId","deployedNetwork","ZombieContract","networks","instance","Contract","abi","address","setState","zombieContractInstance","accountInterval","alert","error","state","zombies","name","account","getZombieDetails","bind","handleChange","createRandomZombie","component","setInterval","getAccounts","activeAccounts","methods","getZombiesByOwner","call","zombieIds","zombieDetails","event","this","target","value","preventDefault","send","from","id","details","push","Spinner","animation","variant","role","displayZombies","map","zombie","dna","level","readyTime","Date","toLocaleString","winCount","lossCount","className","onSubmit","type","placeholder","onChange","Component","Zombie","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a1d54da.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport ZombieContract from \"./contracts/ZombieOwnership.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport { Spinner } from \"react-bootstrap\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      zombies: [],\n      name: \"\", \n      web3: null, \n      account: null, \n      zombieContractInstance: null \n    };\n    this.getZombieDetails = this.getZombieDetails.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.createRandomZombie = this.createRandomZombie.bind(this);\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      // const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = ZombieContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        ZombieContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ \n        web3, \n        // account: accounts[0], \n        zombieContractInstance: instance \n      });\n      this.accountInterval(this);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  accountInterval(component) {\n    setInterval(async () => {\n      try {\n        const { zombieContractInstance, web3, account } = component.state;\n        const activeAccounts = await web3.eth.getAccounts();\n        if(activeAccounts[0] !== account) {\n          const zombieIds = await zombieContractInstance.methods.getZombiesByOwner(activeAccounts[0]).call();\n          const zombieDetails = await component.getZombieDetails(zombieIds);\n          component.setState({\n            account: activeAccounts[0],\n            zombies: zombieDetails\n          });\n        } \n      } catch(error) {\n        console.log(error);\n        console.log(\"account interval\");\n      }\n    }, 100);\n  }\n\n  handleChange(event) {\n    this.setState({ name: event.target.value });\n  }\n\n  async createRandomZombie(event) {\n    try {\n      event.preventDefault();\n      const { zombieContractInstance, name, account } = this.state;\n      await zombieContractInstance.methods.createRandomZombie(name).send({from: account});\n      const zombieIds = await zombieContractInstance.methods.getZombiesByOwner(account).call();\n      const zombieDetails = await this.getZombieDetails(zombieIds);\n      this.setState({ zombies: zombieDetails });\n    } catch(error) {\n      console.log(error);\n    }\n  }\n\n  async getZombieDetails(zombieIds) {\n    const { zombieContractInstance } = this.state;\n    const zombieDetails = [];\n    try {\n      for(var id of zombieIds) {\n        const details = await zombieContractInstance.methods.zombies(id).call();\n        zombieDetails.push(details);\n      }\n      return zombieDetails;\n    } catch(error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <Spinner animation=\"grow\" variant=\"primary\" role=\"status\" />;\n    }\n    const displayZombies = this.state.zombies.map(zombie => <Zombie \n                                                              name={zombie[\"name\"]}\n                                                              dna={zombie[\"dna\"]}\n                                                              level={zombie[\"level\"]}\n                                                              readyTime={new Date(zombie[\"readyTime\"]*1000).toLocaleString(\"en-GB\")}\n                                                              winCount={zombie[\"winCount\"]}\n                                                              lossCount={zombie[\"lossCount\"]}\n                                                            /> );\n    return (\n      <div className=\"App\">\n        <h1>ZombieFactory</h1>\n        <form className=\"zombie-form\" onSubmit={this.createRandomZombie}>\n          <input type=\"text\" placeholder=\"Enter a name\" value={this.state.name} onChange={this.handleChange} />\n          <button type=\"submit\">Create a zombie</button>\n        </form>\n        <div className=\"zombies\">\n          {displayZombies}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Zombie = (props) => {\n  return (\n    <div className=\"zombie\">\n      <h2 className=\"title-zombie\">{props.name}</h2>\n      <div className=\"main-zombie\">\n        <div>Dna: {props.dna}</div>\n        <div>Level: {props.level}</div>\n        <div>Wins: {props.winCount}</div>\n        <div>Losses: {props.lossCount}</div>\n        <div>Ready Time: {props.readyTime}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n\n\n// runExample = async () => {\n//   const { accounts, contract } = this.state;\n\n//   Stores a given value, 5 by default.\n//   await contract.methods.set(5).send({ from: accounts[0] });\n\n//   Get the value from the contract to prove it worked.\n//   const response = await contract.methods.get().call();\n\n//   Update state with the result.\n//   this.setState({ storageValue: response });\n// };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}